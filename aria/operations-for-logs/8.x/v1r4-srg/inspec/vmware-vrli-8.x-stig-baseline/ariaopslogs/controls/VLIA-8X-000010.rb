control 'VLIA-8X-000010' do
  title 'VMware Aria Operations for Logs must use only DoD PKI-established certificate authorities for verification of the establishment of protected sessions.'
  desc  "
    Untrusted Certificate Authorities (CA) can issue certificates, but they may be issued by organizations or individuals that seek to compromise DoD systems or by organizations with insufficient security controls. If the CA used for verifying the certificate is not a DoD-approved CA, trust of this CA has not been established.

    The DoD will only accept PKI certificates obtained from a DoD-approved internal or external certificate authority. Reliance on CAs for the establishment of secure sessions includes, for example, the use of TLS certificates.

    This requirement focuses on communications protection for the application session rather than for the network packet.

    This requirement applies to applications that utilize communications sessions. This includes, but is not limited to, web-based applications and Service-Oriented Architectures (SOA).
  "
  desc  'rationale', ''
  desc  'check', "
    Login to VMware Aria Operations for Logs as an administrator.

    In the slide-out menu on the left, choose Configuration >> SSL.

    Next to \"Existing Certificate\" click \"View Details\" to see the details for the certificate currently installed.

    If the certificate currently installed is not issued by a trusted certificate authority, this is a finding.
  "
  desc 'fix', "
    Generate or request a new certificate from a trusted certificate authority based on the following requirements.

    Requirements for the custom certificate file:
    -The certificate file contains both a valid private key and a valid certificate chain.
    -The private key is generated by the RSA or the DSA algorithm.
    -The private key is not encrypted by a pass phrase.
    -If the certificate is signed by a chain of other certificates, all other certificates must be included in the certificate file that you plan to import.
    -All the certificates and the private key that are included in the certificate file must be PEM-encoded. DER-encoded certificates and private keys are not supported.
    -All the certificates and the private key that are included in the certificate file must be in the PEM format. Certificates in the PFX, PKCS12, PKCS7, or other formats are not supported.

    Note: If this is a clustered deployment then the certificate should be valid for all cluster nodes and the virtual IP/name.

    Login to VMware Aria Operations for Logs as an administrator.

    In the slide-out menu on the left, choose Configuration >> SSL.

    Click \"Choose File\" next to \"New Certificate File\", select the new certificate file, then click Save.

    You may be prompted to restart for this to take effect.
  "
  impact 0.5
  tag severity: 'medium'
  tag gtitle: 'SRG-APP-000427-AU-000040'
  tag gid: 'V-VLIA-8X-000010'
  tag rid: 'SV-VLIA-8X-000010'
  tag stig_id: 'VLIA-8X-000010'
  tag cci: ['CCI-002470']
  tag nist: ['SC-23 (5)']

  token = http("https://#{input('apipath')}/sessions",
               method: 'POST',
               headers: {
                 'Content-Type' => 'application/json',
                 'Accept' => 'application/json'
               },
               data: "{\"username\":\"#{input('username')}\",\"password\":\"#{input('password')}\",\"provider\":\"Local\"}",
               ssl_verify: false)

  describe token do
    its('status') { should cmp 200 }
  end

  unless token.status != 200
    sessID = JSON.parse(token.body)['sessionId']

    response = http("https://#{input('apipath')}/certificate",
                    method: 'GET',
                    headers: {
                      'Content-Type' => 'application/json',
                      'Accept' => 'application/json',
                      'Authorization' => "Bearer #{sessID}"
                    },
                    ssl_verify: false)

    describe response do
      its('status') { should cmp 200 }
    end

    unless response.status != 200
      certs = JSON.parse(response.body)
      certs.each do |cert|
        describe cert['issuer'] do
          its(['organization']) { should match /O=U\.S\. Government/ }
          its(['commonName']) { should match /OU=DoD/ }
        end
      end
    end
  end
end
